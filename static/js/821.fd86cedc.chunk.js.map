{"version":3,"file":"static/js/821.fd86cedc.chunk.js","mappings":"iPAEaA,EAAKC,EAAAA,GAAAA,GAAH,qHAQFC,EAAOD,EAAAA,GAAAA,GAAH,0D,SC8BjB,EAnCiB,SAAC,GAAc,IAAZE,EAAW,EAAXA,KAClB,OACE,SAACH,EAAD,UACGG,EAAKC,KAAI,SAAAC,GAAM,OACd,2BACE,gBACEC,IACED,EAAOE,aAAP,kDAC+CF,EAAOE,cAClD,qCAENC,IAAKH,EAAOI,KACZC,MAAM,QACNC,OAAO,WAET,SAACT,EAAD,UAAOG,EAAOI,SAXPJ,EAAOO,GADF,KAiBrB,ECAD,EAlBa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOV,EAAP,KAAaW,EAAb,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAASH,GACNI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAG,GAAI,OAAIR,EAAQQ,EAAKnB,KAAjB,GACb,GAAE,CAACY,KAEK,8BACQ,IAAhBZ,EAAKoB,QAAe,+EAA4D,SAAC,EAAD,CAAUpB,KAAMA,KAKlG,C,uJCvBD,IAAMqB,EAAU,mCACVC,EAAW,gCAEJC,EAAa,WACtB,OAAOC,MAAM,GAAD,OAAIF,EAAJ,sCAA0CD,GACzD,EAEYI,EAAU,SAACC,GACpB,OAAOF,MAAM,GAAD,OAAIF,EAAJ,gCAAoCD,EAApC,qDAAwFK,GACvG,EAEYC,EAAa,SAACf,GACvB,OAAOY,MAAM,GAAD,OAAIF,EAAJ,iBAAqBV,EAArB,oBAAuCS,EAAvC,mBACf,EAEYO,EAAc,SAAChB,GACxB,OAAOY,MAAM,GAAD,OAAIF,EAAJ,iBAAqBV,EAArB,4BAA+CS,EAA/C,0BACf,EAEYN,EAAW,SAACH,GACrB,OAAOY,MAAM,GAAD,OAAIF,EAAJ,iBAAqBV,EAArB,4BAA+CS,EAA/C,mBACf,C","sources":["components/castFunc/castFunc.styled.js","components/castFunc/CastFunc.jsx","components/cast/Cast.jsx","services/getMovies.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Ul = styled.ul`\nlist-style:none;\njustify-content:center;\ndisplay:flex;\nflex-wrap:wrap;\ncolumn-gap:50px;\n`\n\nexport const Name = styled.h3`\nfont-size:30px;\npadding:15px 0;\n`","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { Ul,Name } from './castFunc.styled';\n\n\nconst CastFunc = ({ cast }) => {\n  return (\n    <Ul>\n      {cast.map(person => (\n        <li key={person.id}>\n          <img\n            src={\n              person.profile_path\n                ? `https://www.themoviedb.org/t/p/original/${person.profile_path}`\n                : 'https://i.ibb.co/VVFCdTD/image.jpg'\n            }\n            alt={person.name}\n            width=\"400px\"\n            height=\"400px\"\n          />\n          <Name>{person.name}</Name>\n        </li>\n      ))}\n    </Ul>\n  );\n};\n\n\n\n\nCastFunc.propTypes = {\n  cast: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          profile_path:PropTypes.string,\n          name:PropTypes.string,\n        })\n      ),\n}\n\nexport default CastFunc;\n","import React from 'react';\nimport { CastById } from 'services/getMovies';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport CastFunc from 'components/castFunc/CastFunc';\n\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { moveid } = useParams();\n\n  useEffect(() => {\n    CastById(moveid)\n      .then(response => response.json())\n      .then(data => setCast(data.cast));\n  }, [moveid]);\n\n  return ( <>\n  {cast.length === 0 ? <p>Sorry but we don't have actors for unknown reasons</p> : <CastFunc cast={cast} />}\n  </>\n    \n  )\n \n};\n\nexport default Cast;\n","const API_KEY = \"450e11a88d577b3ba488dedff52e79a6\"\nconst BASE_URL = \"https://api.themoviedb.org/3/\"\n\nexport const getMovies  = () => {\n    return fetch(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`)\n}\n\nexport const SearchM = (searchText) => {\n    return fetch(`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&include_adult=false&query=${searchText}`)\n}\n\nexport const SearchById = (moveid) => {\n    return fetch(`${BASE_URL}movie/${moveid}?api_key=${API_KEY}&language=en-US`)\n}\n\nexport const ReviewsById = (moveid) => {\n    return fetch(`${BASE_URL}movie/${moveid}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n}\n\nexport const CastById = (moveid) => {\n    return fetch(`${BASE_URL}movie/${moveid}/credits?api_key=${API_KEY}&language=en-US`)\n}"],"names":["Ul","styled","Name","cast","map","person","src","profile_path","alt","name","width","height","id","useState","setCast","moveid","useParams","useEffect","CastById","then","response","json","data","length","API_KEY","BASE_URL","getMovies","fetch","SearchM","searchText","SearchById","ReviewsById"],"sourceRoot":""}