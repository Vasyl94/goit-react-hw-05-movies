{"version":3,"file":"static/js/158.78fb1da1.chunk.js","mappings":"oQAuBA,EAlBqB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAGhBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EACAG,KAAI,SAACC,GAAD,OACH,SAAC,KAAD,CAAqBC,GAAE,UAAKD,EAAME,IAASC,MAAO,CAAEC,KAAMP,GAA1D,UACE,uBAAIG,EAAMK,kBADDL,EAAME,GADd,KAOV,E,kBClBYI,EAAOC,EAAAA,GAAAA,KAAH,mEAKJC,EAAUD,EAAAA,GAAAA,OAAH,0LAWPE,EAASF,EAAAA,GAAAA,MAAH,0KCqEnB,EA/Ee,WACb,OAA0BG,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAGMnB,EAAQkB,EAAaE,IAAI,UAAY,IAG3CC,EAAAA,EAAAA,YAAU,WACHrB,IAGLsB,EAAAA,EAAAA,IAAQtB,GACLuB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAA3B,GAKJ,OAJ4B,IAAxBA,EAAK8B,QAAQC,QACfC,IAAAA,OAAAA,QAAwB,+BAGnBZ,EAASpB,EAAK8B,QACtB,IACAG,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,GACJ,GAAE,CAAC9B,IAiCJ,OACE,iCACE,UAACM,EAAD,CAAM2B,SATW,SAAAC,GAhBA,IAAAC,EAiBnBD,EAAEE,iBAjBiBD,EAkBNxB,EAjBTE,EAAWwB,SAAWF,GAG1BrB,EAAcqB,GAZU,SAACnC,GAEzBmB,EAD6B,KAAVnB,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAElD,CAwBGsC,CAAkB3B,GANlBC,EAAS,GAQV,EAIiC2B,aAAa,MAA3C,WACE,SAAC/B,EAAD,CAASgC,KAAK,SAAd,UACE,wCAEF,SAAC/B,EAAD,CACE+B,KAAK,OACL7B,MAAOA,EACP8B,KAAK,SACLC,SA1Ba,SAAAR,GACnBtB,EAASsB,EAAES,cAAchC,MAE1B,EAwBOiC,YAAY,gCAIf7B,IAAU,SAAC,EAAD,CAAcnB,KAAMmB,MAGpC,C,uJCrFD,IAAM8B,EAAU,mCACVC,EAAW,gCAEJC,EAAa,WACtB,OAAOC,MAAM,GAAD,OAAIF,EAAJ,sCAA0CD,GACzD,EAEYvB,EAAU,SAACT,GACpB,OAAOmC,MAAM,GAAD,OAAIF,EAAJ,gCAAoCD,EAApC,qDAAwFhC,GACvG,EAEYoC,EAAa,SAACC,GACvB,OAAOF,MAAM,GAAD,OAAIF,EAAJ,iBAAqBI,EAArB,oBAAuCL,EAAvC,mBACf,EAEYM,EAAc,SAACD,GACxB,OAAOF,MAAM,GAAD,OAAIF,EAAJ,iBAAqBI,EAArB,4BAA+CL,EAA/C,0BACf,EAEYO,EAAW,SAACF,GACrB,OAAOF,MAAM,GAAD,OAAIF,EAAJ,iBAAqBI,EAArB,4BAA+CL,EAA/C,mBACf,C","sources":["components/titleGallery/TitleGallery.jsx","pages/movies.styled.js","pages/Movies.jsx","services/getMovies.js"],"sourcesContent":["import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { useLocation } from 'react-router-dom';\n\n\nconst TitleGallery = ({ data }) => {\n\n  \n  const location = useLocation();\n  \n  return (\n    <ul>\n      {data\n      .map((query) => (\n        <Link key={query.id} to={`${query.id}`}    state={{ from: location }}>\n          <p>{query.original_title}</p>\n        </Link>\n      ))}\n    </ul>\n  );\n};\n\n\nexport default TitleGallery;\n\nTitleGallery.propTypes = {\n  query:PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    original_title:  PropTypes.string,\n  }))\n}","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-top: 40px;\n  margin-left: 20px;\n`;\n\nexport const ButtonS = styled.button`\n  width: 90px;\n  height: 40px;\n  margin-right: 20px;\n  border: 0;\n  border-radius: 30%;\n  background-color: #d13dbd;\n  color:#ffc548 ;\n  cursor: pointer;\n`;\n\nexport const InputS = styled.input`\nwidth: 200px;\nheight: 40px;\npadding-left: 30px;\nborder-radius: 25%;\nborder: 3px solid royalblue;\nbackground-color:#ff7d72;\ncolor:#923dd2 ;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { SearchM } from 'services/getMovies';\nimport Notiflix from 'notiflix';\nimport TitleGallery from 'components/titleGallery/TitleGallery';\nimport { useSearchParams } from 'react-router-dom';\nimport { Form,ButtonS,InputS } from './movies.styled';\n\n\nconst Movies = () => {\n  const [value, setValue] = useState('');\n  const [searchText, setSearchText] = useState('');\n  const [title, setTitle] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n\n  const query = searchParams.get('query') || \"\";\n\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    SearchM(query)\n      .then(response => response.json())\n      .then(data => {\n        if (data.results.length === 0) {\n          Notiflix.Notify.failure('Sorry,but nothing was found');\n        }\n\n        return setTitle(data.results);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [query]);\n\n  const updateQueryString = (query) => {\n    const nextParams = query !== \"\" ? { query } : {};\n    setSearchParams(nextParams);\n};\n\n\n \n\n  const handleSearch = searchTextе => {\n    if (searchText.trim() === searchTextе) {\n      return;\n    }\n    setSearchText(searchTextе);\n  };\n\n  const handleChange = e => {\n    setValue(e.currentTarget.value);\n\n  };\n\n  const reset = () => {\n    setValue('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleSearch(value);\n    updateQueryString(value)\n    reset();\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <ButtonS type=\"submit\">\n          <span>Search</span>\n        </ButtonS>\n        <InputS\n          type=\"text\"\n          value={value}\n          name=\"search\"\n          onChange={handleChange}\n          placeholder=\"Search images and photos\"\n        />\n      </Form>\n\n      {title  && <TitleGallery data={title} />}\n    </>\n  );\n};\n\nexport default Movies;\n","const API_KEY = \"450e11a88d577b3ba488dedff52e79a6\"\nconst BASE_URL = \"https://api.themoviedb.org/3/\"\n\nexport const getMovies  = () => {\n    return fetch(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`)\n}\n\nexport const SearchM = (searchText) => {\n    return fetch(`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&include_adult=false&query=${searchText}`)\n}\n\nexport const SearchById = (moveid) => {\n    return fetch(`${BASE_URL}movie/${moveid}?api_key=${API_KEY}&language=en-US`)\n}\n\nexport const ReviewsById = (moveid) => {\n    return fetch(`${BASE_URL}movie/${moveid}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n}\n\nexport const CastById = (moveid) => {\n    return fetch(`${BASE_URL}movie/${moveid}/credits?api_key=${API_KEY}&language=en-US`)\n}"],"names":["data","location","useLocation","map","query","to","id","state","from","original_title","Form","styled","ButtonS","InputS","useState","value","setValue","searchText","setSearchText","title","setTitle","useSearchParams","searchParams","setSearchParams","get","useEffect","SearchM","then","response","json","results","length","Notiflix","catch","error","console","log","onSubmit","e","searchTextе","preventDefault","trim","updateQueryString","autoComplete","type","name","onChange","currentTarget","placeholder","API_KEY","BASE_URL","getMovies","fetch","SearchById","moveid","ReviewsById","CastById"],"sourceRoot":""}