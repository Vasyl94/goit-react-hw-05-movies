{"version":3,"file":"static/js/948.c364c063.chunk.js","mappings":"oOA2BA,EAxBmB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACpB,OACE,wBACGA,EAAQC,KAAI,SAAAC,GAAM,OACjB,2BACE,wBAAKA,EAAOC,UAEZ,uBAAID,EAAOE,YAHJF,EAAOG,GADC,KASxB,ECQD,EAjBgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYH,GACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAG,GAAI,OAAIR,EAAWQ,EAAKC,QAApB,GACb,GAAE,CAACR,KAGF,8BACqB,IAAnBR,EAAQiB,QAAe,sEAAmD,SAAC,EAAD,CAAYjB,QAASA,KAGpG,C,uJCrBD,IAAMkB,EAAU,mCACVC,EAAW,gCAEJC,EAAa,WACtB,OAAOC,MAAM,GAAD,OAAIF,EAAJ,sCAA0CD,GACzD,EAEYI,EAAU,SAACC,GACpB,OAAOF,MAAM,GAAD,OAAIF,EAAJ,gCAAoCD,EAApC,qDAAwFK,GACvG,EAEYC,EAAa,SAAChB,GACvB,OAAOa,MAAM,GAAD,OAAIF,EAAJ,iBAAqBX,EAArB,oBAAuCU,EAAvC,mBACf,EAEYP,EAAc,SAACH,GACxB,OAAOa,MAAM,GAAD,OAAIF,EAAJ,iBAAqBX,EAArB,4BAA+CU,EAA/C,0BACf,EAEYO,EAAW,SAACjB,GACrB,OAAOa,MAAM,GAAD,OAAIF,EAAJ,iBAAqBX,EAArB,4BAA+CU,EAA/C,mBACf,C","sources":["components/reviewFunc/ReviewFunc.jsx","components/reviews/Reviews.jsx","services/getMovies.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ReviewFunc = ({ reviews }) => {\n  return (\n    <ul>\n      {reviews.map(review => (\n        <li key={review.id}>\n          <h3>{review.author}</h3>\n\n          <p>{review.content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nReviewFunc.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      content: PropTypes.string,\n      author: PropTypes.string,\n    })\n  ),\n};\n\nexport default ReviewFunc;\n","import { useParams } from 'react-router-dom';\nimport { ReviewsById } from 'services/getMovies';\nimport { useEffect, useState } from 'react';\nimport ReviewFunc from 'components/reviewFunc/ReviewFunc';\n\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { moveid } = useParams();\n\n  useEffect(() => {\n    ReviewsById(moveid)\n      .then(response => response.json())\n      .then(data => setReviews(data.results));\n  }, [moveid]);\n\n  return (\n    <>\n     {reviews.length === 0 ? <p>We don't have ant reviews for this movie.</p> : <ReviewFunc reviews={reviews} />}\n    </>\n  );\n};\n\nexport default Reviews;\n","const API_KEY = \"450e11a88d577b3ba488dedff52e79a6\"\nconst BASE_URL = \"https://api.themoviedb.org/3/\"\n\nexport const getMovies  = () => {\n    return fetch(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`)\n}\n\nexport const SearchM = (searchText) => {\n    return fetch(`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&include_adult=false&query=${searchText}`)\n}\n\nexport const SearchById = (moveid) => {\n    return fetch(`${BASE_URL}movie/${moveid}?api_key=${API_KEY}&language=en-US`)\n}\n\nexport const ReviewsById = (moveid) => {\n    return fetch(`${BASE_URL}movie/${moveid}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n}\n\nexport const CastById = (moveid) => {\n    return fetch(`${BASE_URL}movie/${moveid}/credits?api_key=${API_KEY}&language=en-US`)\n}"],"names":["reviews","map","review","author","content","id","useState","setReviews","moveid","useParams","useEffect","ReviewsById","then","response","json","data","results","length","API_KEY","BASE_URL","getMovies","fetch","SearchM","searchText","SearchById","CastById"],"sourceRoot":""}